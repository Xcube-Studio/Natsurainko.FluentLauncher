name: Build

on: workflow_dispatch

jobs:

  build:
    runs-on: windows-latest
    strategy:
      matrix:
        architecture: [x64, arm64]
    env:
      Solution_Name: Natsurainko.FluentLauncher
      Project_Directory: Natsurainko.FluentLauncher
      Configuration: Release
      Packages_DirectoryName: AppPackages
      Packages_Directory: Natsurainko.FluentLauncher\AppPackages
    name: Build (${{ matrix.architecture }})

    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    
    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3

    - name: Configure NuGet Source
      run: dotnet nuget add source "https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-Labs/nuget/v3/index.json"

    # Restore the application to populate the obj folder with RuntimeIdentifiers
    - name: Restore the application
      run: msbuild $env:Solution_Name /t:Restore /p:Configuration=Release

    # Create the app package by building and packaging the Windows Application Packaging project
    - name: Create app package
      run: |
        msbuild $env:Solution_Name /p:Platform=$env:Platform /p:AppxBundlePlatforms="$env:Appx_Bundle_Platforms" /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:AppxPackageDir="$env:Appx_Package_Dir" /p:GenerateAppxPackageOnBuild=true
      env:
        Appx_Bundle: Never
        Platform: ${{ matrix.architecture }}
        Appx_Bundle_Platforms: ${{ matrix.architecture }}
        Appx_Package_Build_Mode: SideloadOnly
        Appx_Package_Dir: ${{ env.Packages_DirectoryName }}\ # DO NOT REMOVE THE TRAILING SLASH
    
    - name: Create .msixupload
      id: create_msixupload
      run: |
        $msixFile = Get-Item -Path "${{ env.Packages_Directory }}\*\*.msix"
        $packageName = [System.IO.Path]::GetFileNameWithoutExtension($msixFile.FullName)
        echo "::set-output name=packageName::$packageName"

        $sourcePath = "${{ env.Packages_Directory }}\*\*.msix*"
        Compress-Archive -Path $sourcePath -DestinationPath "$packageName.zip"
        mv "$packageName.zip" "$packageName.msixupload"

    - name: Upload .msixupload to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: .msixupload
        path: ${{ steps.create_msixupload.outputs.packageName }}.msixupload

    # Move to current directory to provide a clean layout in artifacts
    - name: Move .msix
      run: mv ${{ env.Packages_Directory }}\*\${{ steps.create_msixupload.outputs.packageName }}.msix ".\${{ steps.create_msixupload.outputs.packageName }}.msix"

    - name: Upload .msix to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: .msix
        path: ${{ steps.create_msixupload.outputs.packageName }}.msix

        
  release:
    name: Release
    needs: build
    runs-on: windows-latest
    env:
      SigningKey_Path: SigningKey.pfx

    steps:
    - name: Download .msix from artifacts
      uses: actions/download-artifact@v3
      with:
        name: .msix
        path: .artifacts

    - name: Get package name
      id: get_package_name
      run: |
        # Get the name of the .msix file
        $file = Get-Item -Path ".artifacts\*.msix"
        if ($file -is [array]) {
          $file = $file[0]
        }

        # Extract the package name with version number
        $fileName = [System.IO.Path]::GetFileNameWithoutExtension($file.FullName)
        $bundleFileName = $fileName -replace '^(.*?Natsurainko\.FluentLauncher)_(\d+\.\d+\.\d+\.\d+)(_x64|_arm64)$', '$1_$2.msixbundle'
        echo "::set-output name=bundleFileName::$bundleFileName"

    - name: Create .msixbundle
      run: |
        # Get makeappx.exe
        $makeappx = Get-Item -Path "C:\Program Files (x86)\Windows Kits\10\bin\*\x64\makeappx.exe"
        if ($makeappx -is [array]) {
          $makeappx = $makeappx[0]
        }

        # Create the .msixbundle using makeappx.exe
        & $makeappx.FullName bundle /d ".\artifacts" /p "${{ steps.get_package_name.outputs.bundleFileName }}"

    - name: Upload .msixbundle to artifacts
      uses: actions/upload-artifact@v2
      with:
        name: .msixbundle
        path: ${{ steps.get_package_name.outputs.bundleFileName }}

    # Decode the base 64 encoded pfx and save the Signing_Certificate
    # - name: Decode pfx
    #   run: |
    #     $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.PFX_BASE64_ENCODED }}")
    #     [IO.File]::WriteAllBytes("${{ env.SigningKey_Path }}", $pfx_cert_byte)

    # Upload the MSIX package as an artifact
    # - name: Upload build artifacts
    #   uses: actions/upload-artifact@v2
    #   with:
    #     name: MSIX Package
    #     path: ${{ env.Packages_Directory }}/*/Natsurainko.FluentLauncher*.msix*
