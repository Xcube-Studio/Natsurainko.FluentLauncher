using CommunityToolkit.Mvvm.SourceGenerators.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace FluentLauncher.Infra.WinUI.SourceGenerators.Notification;

[Generator(LanguageNames.CSharp)]
public class ExceptionNotificationGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var properties = context.SyntaxProvider.ForAttributeWithMetadataName(
            "FluentLauncher.Infra.UI.Notification.ExceptionNotificationAttribute",
            static (node, _) => node is MethodDeclarationSyntax { Parent: ClassDeclarationSyntax },
            static (ctx, token) =>
            {
                // Requires C# 13 partial properties
                if (!(((CSharpCompilation)ctx.SemanticModel.Compilation).LanguageVersion >= LanguageVersion.Preview))
                    return default;

                MethodDeclarationSyntax methodDeclarationSyntax = (MethodDeclarationSyntax)ctx.TargetNode;
                IMethodSymbol methodSymbol = (IMethodSymbol)ctx.TargetSymbol;

                // Extract class info
                INamedTypeSymbol namedTypeSymbol = methodSymbol.ContainingType;
                string @namespace = namedTypeSymbol.ContainingNamespace.ToDisplayString();
                string @class = namedTypeSymbol.Name;

                token.ThrowIfCancellationRequested();

                AttributeData attributeData = ctx.Attributes[0]; // does not allow multiple

                return ((@namespace, @class), (methodSymbol, attributeData));
            }
        );

        var groupedItems =
            properties.GroupBy(
                static item => item.Left,
                static item => item.Right
            );

        context.RegisterSourceOutput(groupedItems, static (ctx, item) =>
        {
            string @namespace = item.Key.@namespace;
            string @class = item.Key.@class;

            var filename = $"{@namespace}.{@class}.g.cs";

            StringBuilder membersBuilder = new();

            foreach (var itemInfo in item.Right)
            {
                GenerateItem(itemInfo, membersBuilder);
            }

            var source =
            $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            using System;
            using FluentLauncher.Infra.UI.Notification;

            namespace {{@namespace}}
            {
                static partial class {{@class}}
                {
                    {{membersBuilder}}
                }
            }
            """;

            ctx.AddSource(filename, source);
        });
    }

    private static void GenerateItem((IMethodSymbol, AttributeData) itemInfo, StringBuilder memberBuilder)
    {
        AttributeData attribute = itemInfo.Item2;
        IMethodSymbol methodSymbol = itemInfo.Item1;
        string methodName = methodSymbol.Name;
        var firstParameter = methodSymbol.Parameters[0];

        IEnumerable<string> properties = attribute.NamedArguments.Select(argument =>
        {
            string value = argument.Value.Value?.ToString() ?? "null";

            if (value != "null")
            {
                if (value.StartsWith("Notifications__"))
                    value = $"{{Natsurainko.FluentLauncher.Utils.LocalizedStrings.{value}}}";

                if (value != "null")
                    value = $"$\"{value}\"";
            }

            return $"                {argument.Key} = {value}";
        }).Append("                Exception = exception");

        List<string> parameters = [ .. methodSymbol.Parameters.Skip(1).Select(p =>
        {
            string parameterType = p.Type.ToDisplayString();
            string parameterName = p.Name;

            return $"{parameterType} {parameterName}";
        })];

        parameters.Insert(0, $"this global::{firstParameter.Type.ToDisplayString()} {firstParameter.Name}");

        memberBuilder.Append(
        $$"""
        public static partial void {{methodName}}({{string.Join(", ", parameters)}}) 
                {
                    {{firstParameter.Name}}.Show(new Natsurainko.FluentLauncher.Services.UI.Notification.ExceptionNotification
                    {
        {{string.Join(",\r\n", properties)}}
                    });
                }
                
        """);
    }
}
