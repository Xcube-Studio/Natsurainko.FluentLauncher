using CommunityToolkit.Mvvm.SourceGenerators.Extensions;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;
using System.Text;

namespace FluentLauncher.Infra.WinUI.SourceGenerators.Notification;

[Generator(LanguageNames.CSharp)]
internal class NotificationGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        var properties = context.SyntaxProvider.ForAttributeWithMetadataName(
            "FluentLauncher.Infra.UI.Notification.NotificationAttribute`1",
            static (node, _) => node is MethodDeclarationSyntax { Parent: ClassDeclarationSyntax },
            static (ctx, token) =>
            {
                // Requires C# 13 partial properties
                if (!(((CSharpCompilation)ctx.SemanticModel.Compilation).LanguageVersion >= LanguageVersion.Preview))
                    return default;

                MethodDeclarationSyntax methodDeclarationSyntax = (MethodDeclarationSyntax)ctx.TargetNode;
                IMethodSymbol methodSymbol = (IMethodSymbol)ctx.TargetSymbol;

                // Extract class info
                INamedTypeSymbol namedTypeSymbol = methodSymbol.ContainingType;
                string @namespace = namedTypeSymbol.ContainingNamespace.ToDisplayString();
                string @class = namedTypeSymbol.Name;

                token.ThrowIfCancellationRequested();

                AttributeData attributeData = ctx.Attributes[0]; // does not allow multiple

                return ((@namespace, @class), (methodSymbol, attributeData));
            }
        );

        var groupedItems =
            properties.GroupBy(
                static item => item.Left,
                static item => item.Right
            );

        context.RegisterSourceOutput(groupedItems, static (ctx, item) =>
        {
            string @namespace = item.Key.@namespace;
            string @class= item.Key.@class;

            var filename = $"{@namespace}.{@class}.g.cs";

            StringBuilder membersBuilder = new();
            foreach (var itemInfo in item.Right)
            {
                GenerateItem(itemInfo, membersBuilder);
            }

            var source = 
            $$"""
            // <auto-generated/>
            #pragma warning disable
            #nullable enable

            using System;
            using Natsurainko.FluentLauncher.Utils;
            using FluentLauncher.Infra.UI.Notification;

            namespace {{@namespace}}
            {
                partial class {{@class}}
                {
                    {{membersBuilder}}
                }
            }
            """;

            ctx.AddSource(filename, source);
        });
    }

    private static void GenerateItem((IMethodSymbol, AttributeData) itemInfo, StringBuilder memberBuilder)
    {
        string methodName = itemInfo.Item1.Name;
        AttributeData attribute = itemInfo.Item2;

        // Extract generic type (TElement from NotificationAttribute<TElement>)
        string elementType = attribute.AttributeClass.TypeArguments[0].ToDisplayString();

        // Extract named arguments (Title, Message, Type, etc.)
        string title = GetNamedArgumentValue(attribute, "Title", "\"\"");
        string message = GetNamedArgumentValue(attribute, "Message", "null");
        string isClosable = GetNamedArgumentValue(attribute, "IsClosable", "true");
        string type = GetNamedArgumentValue(attribute, "Type", "NotificationType.Info");

        if (title.StartsWith("Notifications__"))
            title = "LocalizedStrings." + title;
        else if (message.StartsWith("$"))
            message = message.Substring(1);
        else title = $"@\"{title}\"";

        if (message.StartsWith("Notifications__"))
            message = "LocalizedStrings." + message;
        else if (message.StartsWith("$"))
            message = message.Substring(1);
        else if (message != "null")
            message = $"@\"{message}\"";

        // Extract method parameters
        StringBuilder parameterListBuilder = new();
        StringBuilder parameterUsageBuilder = new();

        foreach (var parameter in itemInfo.Item1.Parameters)
        {
            string parameterType = parameter.Type.ToDisplayString();
            string parameterName = parameter.Name;

            parameterListBuilder.Append($"{parameterType} {parameterName}, ");
            parameterUsageBuilder.Append($"{parameterName}, ");

            // Replace placeholders in message with parameters
            message = message.Replace($"${{{parameterName}}}", $"{{{parameterName}}}");
        }

        // Trim trailing ", "
        string parameterList = parameterListBuilder.Length > 2
            ? parameterListBuilder.ToString(0, parameterListBuilder.Length - 2)
            : string.Empty;

        // Generate method body
        memberBuilder.Append(
        $$"""
        public partial void {{methodName}}({{parameterList}}) 
                {
                    _notificationService.Show<{{elementType}}>(new Natsurainko.FluentLauncher.Services.UI.Notification.Notification
                    {
                        Title = {{title}},
                        Message = {{message}},
                        IsClosable = {{isClosable}},
                        Type = (NotificationType){{type}}
                    });
                }
                
        """);

    }

    private static string GetNamedArgumentValue(AttributeData attribute, string argumentName, string defaultValue)
    {
        foreach (var argument in attribute.NamedArguments)
        {
            if (argument.Key == argumentName)
            {
                return argument.Value.Value?.ToString() ?? defaultValue;
            }
        }
        return defaultValue;
    }
}
